/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React, {Component} from 'react';
import {
    StyleSheet,
    Text,
    View,
    ToastAndroid,
    Button,
    FlatList
} from 'react-native';
import Tts from 'react-native-tts';
import axios from 'axios';
import SpeechAndroid from 'react-native-android-voice';

export default class App extends Component {

    constructor(props) {
        super(props);
        this.onSpeak = this.onSpeak.bind(this);
        this.state = {
            showMessage: []
        };
    }

    async onSpeak() {
        try{
            const spokenText = await SpeechAndroid.startSpeech("Speak yo", SpeechAndroid.DEFAULT)
                .then((res) => {
                    this.setState({showMessage: this.state.showMessage.concat(res)})
                    return res;
                });

            const reply = await fetch(`http://192.168.1.4:5000/getmsg/${spokenText}`)
                .then(res => res.json())
                .then(message => {
                    console.log(message[spokenText]);
                    Tts.speak(message[spokenText]);
                    return message[spokenText]
                })
                .catch(err => console.log(err));

            this.setState({showMessage: this.state.showMessage.concat(reply)});


        }catch(error){
            switch(error){
                case SpeechAndroid.E_VOICE_CANCELLED:
                    ToastAndroid.show("Voice Recognizer cancelled" , ToastAndroid.LONG);
                    break;
                case SpeechAndroid.E_NO_MATCH:
                    ToastAndroid.show("No match for what you said" , ToastAndroid.LONG);
                    break;
                case SpeechAndroid.E_SERVER_ERROR:
                    ToastAndroid.show("Google Server Error" , ToastAndroid.LONG);
                    break;
                /*And more errors that will be documented on Docs upon release*/
            }
        }
    }
    render() {
        const messages = this.state.showMessage;
        return (
            <View style={styles.container}>
                <FlatList
                    style={styles.welcome}
                    data={messages}
                    keyExtractor={item => item}
                    renderItem={({item}) => <Text>{item}</Text>}
                />

                <Button
                    onPress={this.onSpeak}
                    title="Press to talk"
                    color="#37B6DF"
                    accessibilityLabel="Press to talk"
                />
            </View>
        );
    }
}

const styles = StyleSheet.create({
    button: {
        width: 50,
        height: 50,
    },
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#F5FCFF',
    },
    welcome: {
        fontSize: 20,
        textAlign: 'center',
        margin: 10,
    },
    action: {
        textAlign: 'center',
        color: '#0000FF',
        marginVertical: 5,
        fontWeight: 'bold',
    },
    instructions: {
        textAlign: 'center',
        color: '#333333',
        marginBottom: 5,
    },
    stat: {
        textAlign: 'center',
        color: '#B0171F',
        marginBottom: 1,
    },
});

